大きな数
10e8は0が9個

--------------------------------------------------------------
// 桁dp
// s以下の数値のうち4を含む数の総数
ll calcDP( string s )
{
    vector<vector<vector<ll> > > dp(s.size()+1, vector<vector<ll> > (2, vector<ll>(2,0)));
    
    dp[0][0][0] = 1;

    rep(i,s.size())
    {
        int key = s[i]-'0';
        rep(smaller, 2)
        {
            rep(isUsed, 2)
            {
                // s[i]ぴったし
                rep(n, (smaller? 10 : key+1))
                {
                    dp[i+1][smaller || n < key][n == 4 || n == 9 || isUsed] += dp[i][smaller][isUsed];
                }
            }
        }
    }

    return dp[s.size()][0][1] + dp[s.size()][1][1];
}

// s以下の数値に含まれる1の総数
ll calcDP( string s )
{
    vector<vector<vector<ll> > > dp(s.size()+1, vector<vector<ll> > (2, vector<ll>(12,0)));
    
    dp[0][0][0] = 1;

    rep(i,s.size())
    {
        int key = s[i]-'0';
        rep(smaller, 2)
        {
            rep(one_cnt, 10)
            {
                rep(n, (smaller? 10 : key+1))
                {
                    if( n == 1 ) dp[i+1][smaller || n < key][one_cnt+1] += dp[i][smaller][one_cnt];
                    else dp[i+1][smaller || n < key][one_cnt] += dp[i][smaller][one_cnt];
                }
            }
        }
    }

    ll ans = 0;
    rep(i,s.size()+1)
    {
        ans += (dp[s.size()][0][i]+dp[s.size()][1][i])*i;
    }

    return ans;
}


--------------------------------------------------------------
//UnionFind

struct UnionFind {
    // 親ノードの番号を持つメンバ変数
    // ただし自分が親の時は-x(xは自身を含めた子ノードの数)
    vector<int> par;
    
    //　コンストラクタでの初期化1(初期値-1を持つn次元配列)
    UnionFind(int n) : par(n, -1) { }
    void init(int n) { par.assign(n, -1); }
    
    // 与えられたノードの親ノードの番号を返すメンバ関数
    int root(int x) {
        // もしも親ノードが0以下なら、それは初期値なので自身が親
        if (par[x] < 0) return x;
        // 親ノードを再帰的に一番上までたどって返す
        // 単にroot(par[x])ではなく代入してるのは、根に直接張り直すため
        else return par[x] = root(par[x]);
    }
    
    // もし根が同じかどうかの判定
    bool same(int x, int y) {
        return root(x) == root(y);
    }
    
    // ２つの根をマージする処理
    bool unite(int x, int y) {
        // 根をたどって、同じなら何もしない
        x = root(x); y = root(y);
        if (x == y) return false;
 
        // xもyも今は親ノードなので、子の数を比べる
        if (par[x] > par[y]) swap(x, y); // merge technique
 
        // 小さい方を親ノードにする
        par[x] += par[y];
        par[y] = x;
        return true;
    }
    
    // 親ノードに入っている番号*-1 = この木のノード数を返す。
    int size(int x) {
        return -par[root(x)];
    }
};

--------------------------------------------------------------
ダイクストラ法


#define MAX_V (ll)1e5+1

struct edge {
    ll to;
    ll cost;
};

// <最短距離, 頂点の番号>
#define P pair<ll, ll>

// Vは頂点数
ll V;
vector<edge> G[MAX_V];
vector<ll> d(MAX_V, INF_LL);

void dijkstra(ll s) {
    priority_queue<P, vector<P>, greater<P> > que;
    d[s] = 0;
    que.push(P(0, s));

    while (!que.empty()) {
        P p = que.top();
        que.pop();
        ll v = p.second;
        if (d[v] < p.first) continue;

        for (ll i=0; i<G[v].size(); ++i) {
            edge e = G[v][i];
            if (d[e.to] > d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to], e.to));
            }
        }
    }
}

// 使う時

// グラフを生成する
rep(i, N)
{
    cin >> a >> b >> c;

    // a, bは長さcで繋がっている
    edge e = {b, c};
    G[a].push_back(e);
    edge e = {a, c};
    G[b].push_back(e);
}

// 頂点0 を起点にダイクストラ
dijkstra(0);

rep(i,d.size())
{
    cout << "頂点0から頂点" << i << "までの距離は" << d[i] << endl;
}



--------------------------------------------------------------

文字から数字に変換

string s = "123";

int top_s = s[0]-'0';
// => top_s = 1

--------------------------------------------------------------

文字列の大小について

string tmp = "AaBb";

setに突っ込むと -> "ABab" となる

小文字かどうかの判定

if(tmp[i] < 'a' ) 大文字
else 小文字

小文字から大文字変換

tmp[1] = (char)(tmp[1] - 0x20) // AABb

--------------------------------------------------------------

template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }

--------------------------------------------------------------
MOD周り

// n ^ r % m
template <typename T> T mod_pow(T n, T r, T m)
{
	T ret = 1;
	T tmp = n;
	
	while(r != 0) {
		if(r % 2) {
			ret *= tmp;
		}
		tmp *= tmp;
		tmp %= m;
		ret %= m;
		r /= 2;
	}
	return ret;
}

// フェルマーの小定理より X / Y %MOD == X * Y^(MOD-2) %MOD
template <typename T> T mod_inv (T a, T m)
{
	return mod_pow(a, m - 2, m);
}

// a / b / m (m == MODとか)
template <typename T> T mod_div (T a, T b, T m)
{
	return a * mod_inv(b, m) % m;
}

// (a - b)%MOD
template <typename T> T mod_sub (T a, T b, T m)
{
	return (a < b) ? m + a - b : (a - b) % m;
}


--------------------------------------------------------------

二項係数

#define MAX 510000
long long fac[MAX], finv[MAX], inv[MAX];

// テーブルを作る前処理
void COMinit()
{
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++)
    {
        fac[i] = fac[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;
        finv[i] = finv[i - 1] * inv[i] % MOD;
    }
}
 
// 二項係数計算
long long COM(int n, int k)
{
    if (n < k)
        return 0;
    if (n < 0 || k < 0)
        return 0;
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}


--------------------------------------------------------------

2次元vectorの初期値
N * Hが欲しい時
vector<vector<int> >dp(N, vector<int>(H));

順列とか辞書順
next_permutation

do
{
    // やりたい処理

}
while(next_permutation(基準となる配列);

例
vector<int> a = {1,2,3};
do
{
    cout << a << endl;
}while(next_permutation(all(a))

実行結果
1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1

--------------------------------------------------------------

vectorの最大値
std::vector<ll>::iterator iter = std::max_element(all(x));
size_t index = std::distance(x.begin(), iter);
最大値: x[index]

--------------------------------------------------------------

被りがないvector
set
値の挿入はinsert

例 
set s;
s.insert(3);
s.insert(4);

for(set<ll>::iterator itr = s.begin(); itr != s.end(); ++itr) {
    cout << *itr << endl;
}

実行結果
3
4

要素があるか確認
if(s.find(探したい要素) != s.end)
{
    あるよ
}
--------------------------------------------------------------

bit全探索

例
int n = 3;

rep(bit,(1<<n))
{
    vector<int> S;
    rep(i,n)
    {
        if (bit & (1<<i)) S.push_back(i);
    }

    for (int i = 0; i < (int)S.size(); ++i)
    {
        cout << S[i] << " ";
    }
    cout << endl;
}
出力

0: 
1: 0
2: 1
3: 0 1
4: 2
5: 0 2
6: 1 2
7: 0 1 2
--------------------------------------------------------------

vector 2次元配列

vector<vector<ll> > a;

sort(大きいやつから)
sort(all(a),greater<vector<ll> >());
--------------------------------------------------------------
// 素数判定
bool isPrime(int num)
{
    if (num < 2) return false;
    else if (num == 2) return true;
    else if (num % 2 == 0) return false; // 偶数はあらかじめ除く

    double sqrtNum = sqrt(num);
    for (int i = 3; i <= sqrtNum; i += 2)
    {
        if (num % i == 0)
        {
            // 素数ではない
            return false;
        }
    }

    // 素数である
    return true;
}

最大公約数
ll gcd(ll x, ll y)
{
	return y==0 ? x:gcd(y,x % y);
}

最小公倍数
ll lcm(ll number1,ll number2){
	return number1 /gcd(number1,number2) * number2;	
}

約数全列挙
template<typename T> vector<ll> divisor( T n)
{
  vector<ll> ret;
  for(ll i = 1; i * i <= (ll)(n); i++) {
    if(n % i == 0) {
      ret.push_back(i);
      if(i * i != n) ret.push_back(n / i);
    }
  }
  sort(all(ret));
  return ret;
}

--------------------------------------------------------------
優先度付きキュー: priority_queue
例(ABC141_D)

priority_queue<ll> q;
q.push(4);
q.push(3);
q.push(5);
cout << q.top() << endl; // => 5
q.pop()
cout << q.top() << endl; // => 4

q.top()で最小値を使いたい時
priority_queue<int, vector<int>,greater<int> > q;
キューをコピーしたい時
priority_queue<ll> q2 = q;

--------------------------------------------------------------
BFS

ABC151 Dを見る
